{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"name":"model1_0.ipynb","provenance":[],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"scrolled":true,"id":"40-a_FoHGEQ-","colab_type":"code","outputId":"6c9be426-b8e1-4312-ea53-d4a424831fb2","executionInfo":{"status":"ok","timestamp":1576927902180,"user_tz":-180,"elapsed":2399,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":80}},"source":["# Imports\n","\n","import numpy as np  # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","import os\n","import shutil # high-level operations on files\n","from tqdm import tqdm # Progress bar and status logging\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report,confusion_matrix\n","\n","import cv2 # computer vision algorithms\n","\n","# Importing the Keras libraries and packages\n","from keras import utils\n","from keras.wrappers.scikit_learn import KerasClassifier\n","from keras.models import Sequential\n","from keras.layers import Conv2D\n","from keras.layers import MaxPooling2D\n","from keras.layers import Flatten\n","from keras.layers import Dense\n","from keras.layers import Dropout\n","\n","import matplotlib.pyplot as plt\n","from PIL import Image"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"cVlZj-a9aLXG","colab_type":"code","colab":{}},"source":["try:\n","    import dlib\n","except:\n","    subprocess.call([sys.executable, \"-m\", \"pip\", \"install\", 'dlib'])\n","    import dlib"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KsEeKjgFGZsQ","colab_type":"code","outputId":"13734bcf-cd44-40c1-d009-01123258bde4","executionInfo":{"status":"ok","timestamp":1576927902546,"user_tz":-180,"elapsed":450,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","%cd /content"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n","/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KZ5nxlIkGyye","colab_type":"code","outputId":"1ae3a50b-9b4a-4641-cee0-01381cfb33c1","executionInfo":{"status":"ok","timestamp":1576927907490,"user_tz":-180,"elapsed":3021,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["%ls /gdrive/My\\ Drive/dataset"],"execution_count":0,"outputs":[{"output_type":"stream","text":["shape_predictor_68_face_landmarks.dat  \u001b[0m\u001b[01;34mtrain\u001b[0m/          \u001b[01;34mtraining_real\u001b[0m/\n","\u001b[01;34mtest\u001b[0m/                                  \u001b[01;34mtraining_fake\u001b[0m/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1aH1Q5tlG8KB","colab_type":"code","colab":{}},"source":["os.chdir(\"/gdrive/My Drive/dataset\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ddKEXFRbGERD","colab_type":"code","outputId":"6339f984-ea39-4b02-80ab-b5352fe763ed","executionInfo":{"status":"ok","timestamp":1576927907493,"user_tz":-180,"elapsed":2478,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["for dirname, _, filenames in os.walk('./'):\n","    print (dirname)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["./\n","./training_fake\n","./training_real\n","./train\n","./train/fake\n","./train/real\n","./test\n","./test/fake\n","./test/real\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UBb69R_qGERH","colab_type":"code","colab":{}},"source":["# Configuration\n","\n","DATASET_DIR = '../dataset'\n","TRAIN_DIR = '../dataset/train'\n","TEST_DIR = '../dataset/test'\n","\n","RATE = 0.2 # splitting proportion for training and test datasets\n","\n","# Parameters for Grid Search\n","\n","N_EPOCHS = [20] #[20, 40, 100, 200]\n","OPTIMIZERS = ['adam', 'rmsprop', 'SGD']\n","DROPOUT_RATES =  [0.1, 0.2, 0.4]\n","LOSS_FUNCTIONS = ['binary_crossentropy']  #['sparse_categorical_crossentropy', 'kullback_leibler_divergence']  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9eUH4rswGERJ","colab_type":"code","colab":{}},"source":["os.mkdir(TRAIN_DIR)\n","os.mkdir(TRAIN_DIR+'/fake')\n","os.mkdir(TRAIN_DIR+'/real')\n","\n","os.mkdir(TEST_DIR)\n","os.mkdir(TEST_DIR+'/fake')\n","os.mkdir(TEST_DIR+'/real')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rtjx5SeoGERL","colab_type":"code","colab":{}},"source":["files_real = os.listdir(f'{DATASET_DIR}/training_real')\n","files_fake = os.listdir(f'{DATASET_DIR}/training_fake')\n","\n","\n","# sample from each class to create a test set\n","np.random.seed(0)\n","files_real_test = np.random.choice(\n","    files_real,\n","    size=round(len(files_real) * RATE),\n","    replace=False,\n","    p=None)\n","\n","files_real_train = list(set(files_real) - set(files_real_test)) #[file for file in files_real if file not in files_real_test] \n","\n","files_fake_test = np.random.choice(\n","    files_fake,\n","    size=round(len(files_fake) * RATE),\n","    replace=False,\n","    p=None)\n","\n","files_fake_train = list(set(files_fake) - set(files_fake_test)) #[file for file in files_fake if file not in files_fake_test] \n","\n","for file in files_real_train:\n","    shutil.copyfile(DATASET_DIR+'/training_real/'+file, TRAIN_DIR+'/real/'+file) \n","\n","for file in files_fake_train:\n","    shutil.copyfile(DATASET_DIR+'/training_fake/'+file, TRAIN_DIR+'/fake/'+file) \n","\n","for file in files_real_test:\n","    shutil.copyfile(DATASET_DIR+'/training_real/'+file, TEST_DIR+'/real/'+file) \n","\n","for file in files_fake_test:\n","    shutil.copyfile(DATASET_DIR+'/training_fake/'+file, TEST_DIR+'/fake/'+file) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p5Rd3soDGERN","colab_type":"code","outputId":"a4dc2afd-6f7e-4d6e-e72d-81d2f8e0a54a","executionInfo":{"status":"ok","timestamp":1576920796849,"user_tz":-180,"elapsed":590,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["train_samples = sum([len(files) for r, d, files in os.walk(TRAIN_DIR)])\n","test_samples = sum([len(files) for r, d, files in os.walk(TEST_DIR)])\n","print('Number of training images: {} \\nNumber of test images: {}'.format(train_samples, test_samples))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Number of training images: 1631 \n","Number of test images: 410\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GIsx-anNapps","colab_type":"code","colab":{}},"source":["detector = dlib.get_frontal_face_detector()\n","predictor = dlib.shape_predictor(f'{DATASET_DIR}/shape_predictor_68_face_landmarks.dat')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2voufmlybp03","colab_type":"code","colab":{}},"source":["fakeImgList=os.listdir(f'{DATASET_DIR}/train/fake/')\n","realImgList=os.listdir(f'{DATASET_DIR}/train/real/')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"s_H4ZH8UcPuD","colab_type":"code","outputId":"7f5940a6-08a3-4ce0-95c7-8fd797863e9f","executionInfo":{"status":"ok","timestamp":1576927930859,"user_tz":-180,"elapsed":581,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["def genResult(fileList):\n","    nameDict={}\n","    for nameString in fileList:\n","        temp=nameString.split('.')[0]\n","        infoList=temp.split('_')\n","        lvl=infoList[0]\n","        filNum=infoList[1]\n","        flag = True\n","        try:\n","          rgs=[int(x) for x in str(infoList[2])]\n","        except:\n","          print(infoList[2])\n","          flag = False\n","        if flag:\n","          nameDict[nameString]=[lvl,filNum,rgs]\n","    return nameDict\n","\n","def genOrigin(fileList):\n","    nameDict={}\n","    for nmStr in fileList:\n","        nameDict[int(nmStr.split('.')[0].split('_')[1])]=nmStr\n","    return nameDict\n","\n","fakeDictionary=genResult(fakeImgList)\n","realDictionary=genOrigin(realImgList)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1111 (1)\n","1111 (1)\n","1111 (1)\n","0111 (1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ABWTZnelnCJa","colab_type":"code","colab":{}},"source":["def oneImgPipeline(img_cv2, img_open):\n","    img_gray = cv2.cvtColor(img_cv2, cv2.COLOR_BGR2GRAY)\n","    faces_in_image = detector(img_gray, 0)\n","    \n","    if len(faces_in_image)!=1:\n","        return \n","    \n","    for face in faces_in_image:\n","        landmarks = predictor(img_gray, face)\n","        landmarks_list = []\n","        for i in range(0, landmarks.num_parts):\n","            landmarks_list.append((landmarks.part(i).x, landmarks.part(i).y))\n","\n","    xaxis=[x[0] for x in landmarks_list]\n","    yaxis=[x[1] for x in landmarks_list]\n","    \n","    data = np.asarray(img_open, dtype=\"int32\" )\n","\n","    def maskRightEye(xlst,ylst):\n","        hotXs=xlst[36:42]\n","        hotYs=ylst[36:42]\n","        minX=min(hotXs)\n","        maxX=max(hotXs)\n","\n","        minY=min(hotYs)\n","        maxY=max(hotYs)\n","\n","        leftX=max(0,minX-(maxX-minX)/2)\n","        rightX=min(data.shape[1],maxX+(maxX-minX)/2+1)\n","\n","        botY=min(data.shape[0],maxY+maxY-minY+1)\n","        topY=max(0,minY-maxY+minY)\n","\n","        boxXLst=[leftX,rightX,rightX,leftX,leftX]\n","        boxYLst=[topY,topY,botY,botY,topY]\n","        #ax1.plot(boxXLst,boxYLst,linewidth=10.0)\n","        return int(leftX),int(rightX),int(topY),int(botY)\n","        \n","    def maskLeftEye(xlst,ylst):\n","        hotXs=xlst[42:48]\n","        hotYs=ylst[42:48]\n","        minX=min(hotXs)\n","        maxX=max(hotXs)\n","\n","        minY=min(hotYs)\n","        maxY=max(hotYs)\n","\n","        leftX=max(0,minX-(maxX-minX)/2)\n","        rightX=min(data.shape[1],maxX+(maxX-minX)/2+1)\n","\n","        botY=min(data.shape[0],maxY+maxY-minY+1)\n","        topY=max(0,minY-maxY+minY)\n","\n","        boxXLst=[leftX,rightX,rightX,leftX,leftX]\n","        boxYLst=[topY,topY,botY,botY,topY]\n","        #ax1.plot(boxXLst,boxYLst,linewidth=10.0)\n","        return int(leftX),int(rightX),int(topY),int(botY)\n","    \n","    def maskNose(xlst,ylst):\n","        hotXs=xlst[27:36]\n","        hotYs=ylst[27:36]\n","        minX=min(hotXs)\n","        maxX=max(hotXs)\n","\n","        minY=min(hotYs)\n","        maxY=max(hotYs)\n","\n","        leftX=max(0,minX-(maxX-minX)/5)\n","        rightX=min(data.shape[1],maxX+(maxX-minX)/5+1)\n","\n","        botY=min(data.shape[0],maxY+(maxY-minY)/10+1)\n","        topY=max(0,minY-(maxY-minY)/10)\n","\n","        boxXLst=[leftX,rightX,rightX,leftX,leftX]\n","        boxYLst=[topY,topY,botY,botY,topY]\n","        #ax1.plot(boxXLst,boxYLst,linewidth=10.0)\n","        return int(leftX),int(rightX),int(topY),int(botY)\n","    \n","    def maskMouth(xlst,ylst):\n","        hotXs=xlst[48:68]\n","        hotYs=ylst[48:68]\n","        minX=min(hotXs)\n","        maxX=max(hotXs)\n","\n","        minY=min(hotYs)\n","        maxY=max(hotYs)\n","\n","        leftX=max(0,minX-(maxX-minX)/10)\n","        rightX=min(data.shape[1],maxX+(maxX-minX)/10+1)\n","\n","        botY=min(data.shape[0],maxY+(maxY-minY)/10+1)\n","        topY=max(0,minY-(maxY-minY)/10)\n","\n","        boxXLst=[leftX,rightX,rightX,leftX,leftX]\n","        boxYLst=[topY,topY,botY,botY,topY]\n","        return int(leftX),int(rightX),int(topY),int(botY)\n","    \n","    rightEyeInfo=maskRightEye(xaxis,yaxis)\n","    leftEyeInfo=maskLeftEye(xaxis,yaxis)\n","    noseInfo=maskNose(xaxis,yaxis)\n","    mouthInfo=maskMouth(xaxis,yaxis)\n","\n","    return (rightEyeInfo, leftEyeInfo, noseInfo, mouthInfo)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bIkcC6MvGERP","colab_type":"code","colab":{}},"source":[" def get_images(path, place, img_shape=(64, 64)):\n"," \n","    '''\n","    Returns a np array of images and labels from path\n","    Images must be stored in path/class1, path/class2\n","    '''\n","    main_path = path\n","    y = []\n","    list = [name for name in os.listdir(main_path) if os.path.isdir(os.path.join(main_path, name))]\n","    print(list)\n","    image_collection = []\n","    for idx,folder in enumerate(list):\n","\n","        label = idx\n","        \n","        sub_list = sorted(os.listdir(os.path.join(main_path,folder)))\n"," \n","        for i in tqdm(range(1, len(sub_list))):\n","            fake = False\n","            cur_label = 0\n","            if label == 0:\n","              fake = True\n","              cur_label = sub_list[i][(place - 8)]\n","              if cur_label == '_' or cur_label == ' ' or cur_label == \"(\" or cur_label == \")\":\n","                cur_label = 0\n","            image_path = os.path.join(main_path, folder, sub_list[i])\n","            read_image = cv2.imread(image_path)\n","            img_open = Image.open(image_path)\n","            indexes = oneImgPipeline(read_image, img_open)\n","            if indexes == None:\n","              continue\n","            first = read_image[indexes[place][0]:indexes[place][1], indexes[place][2]:indexes[place][3]]\n","            image_resized = cv2.resize(read_image, img_shape, interpolation=cv2.INTER_AREA)\n"," \n","            image = np.float32(image_resized)\n","            image = cv2.normalize(image, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F) #Change alpha, beta according to the preprocessing you desire\n","            \n","            image_collection.append(image)\n","            if fake:\n","              y.append(cur_label)\n","            else:\n","              y.append(label)\n","\n","    y = np.array(y)\n","    y = utils.to_categorical(y,num_classes=len(list))\n"," \n","    return image_collection, y[:,0] "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IIvbhAxaGERS","colab_type":"code","outputId":"161749b6-9b7b-4a59-ffd7-647bf3bacb8d","executionInfo":{"status":"ok","timestamp":1576928113984,"user_tz":-180,"elapsed":142947,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["# Preparing test and trainng datasets\n","fx_train,fy_train = get_images(TRAIN_DIR,0 ,img_shape=(64,64))\n","fx_test,fy_test = get_images(TEST_DIR, 0, img_shape=(64,64))\n","fx_train = np.array(fx_train)\n","fx_test = np.array(fx_test)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["  0%|          | 1/767 [00:00<02:22,  5.38it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 767/767 [00:54<00:00, 14.35it/s]\n","100%|██████████| 862/862 [00:59<00:00, 14.74it/s]\n","  1%|          | 2/193 [00:00<00:14, 13.12it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 193/193 [00:13<00:00, 14.19it/s]\n","100%|██████████| 215/215 [00:14<00:00, 14.46it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"GtK1IK3CwXkn","colab_type":"code","outputId":"1669804a-694c-4df2-d6b0-37ade6e6f409","executionInfo":{"status":"ok","timestamp":1576928266022,"user_tz":-180,"elapsed":141399,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["sx_train,sy_train = get_images(TRAIN_DIR,1 ,img_shape=(64,64))\n","sx_test,sy_test = get_images(TEST_DIR, 1, img_shape=(64,64))\n","sx_train = np.array(sx_train)\n","sx_test = np.array(sx_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["  0%|          | 2/767 [00:00<00:52, 14.50it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 767/767 [00:52<00:00, 14.48it/s]\n","100%|██████████| 862/862 [00:59<00:00, 15.48it/s]\n","  1%|          | 2/193 [00:00<00:14, 13.58it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 193/193 [00:13<00:00, 14.18it/s]\n","100%|██████████| 215/215 [00:14<00:00, 14.56it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"enhv9suJwf2i","colab_type":"code","outputId":"b8d911d4-681c-4083-e49c-b0870eab2ed2","executionInfo":{"status":"ok","timestamp":1576928411538,"user_tz":-180,"elapsed":141173,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["tx_train,ty_train = get_images(TRAIN_DIR, 2, img_shape=(64,64))\n","tx_test,ty_test = get_images(TEST_DIR, 2, img_shape=(64,64))\n","tx_train = np.array(tx_train)\n","tx_test = np.array(tx_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["  0%|          | 2/767 [00:00<00:51, 14.72it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 767/767 [00:53<00:00, 14.34it/s]\n","100%|██████████| 862/862 [00:59<00:00, 15.63it/s]\n","  1%|          | 2/193 [00:00<00:14, 13.40it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 193/193 [00:13<00:00, 14.54it/s]\n","100%|██████████| 215/215 [00:14<00:00, 14.54it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ewUF4kWrwwyW","colab_type":"code","outputId":"ffed0d4f-3099-4c9e-ffd5-b17623e3b7e1","executionInfo":{"status":"ok","timestamp":1576928555515,"user_tz":-180,"elapsed":139895,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["mx_train, my_train = get_images(TRAIN_DIR, 3, img_shape=(64,64))\n","mx_test, my_test = get_images(TEST_DIR, 3, img_shape=(64,64))\n","mx_train = np.array(mx_train)\n","mx_test = np.array(mx_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["  0%|          | 2/767 [00:00<00:51, 14.89it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 767/767 [00:52<00:00, 14.61it/s]\n","100%|██████████| 862/862 [00:59<00:00, 14.89it/s]\n","  1%|          | 2/193 [00:00<00:13, 13.92it/s]"],"name":"stderr"},{"output_type":"stream","text":["['fake', 'real']\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 193/193 [00:13<00:00, 14.68it/s]\n","100%|██████████| 215/215 [00:14<00:00, 14.75it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"g6Bsmc37GERU","colab_type":"code","outputId":"6ad5da39-4b42-4cfc-d0f3-e33433bb7336","executionInfo":{"status":"ok","timestamp":1576882119143,"user_tz":-180,"elapsed":553,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print('Training set', X_train.shape)\n","print('Test set', X_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training set (1543, 64, 64, 3)\n","Test set (388, 64, 64, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"68UIRpxdGERW","colab_type":"code","colab":{}},"source":["#Shuffle training examples\n","fx_train, fy_train = shuffle(fx_train, fy_train)\n","sx_train, sy_train = shuffle(sx_train, sy_train)\n","tx_train, ty_train = shuffle(tx_train, fy_train)\n","mx_train, my_train = shuffle(mx_train, my_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ccuAZhaf50pb","colab_type":"code","outputId":"2856413d-f7e4-43cf-a165-11690e5d7928","executionInfo":{"status":"ok","timestamp":1576928562753,"user_tz":-180,"elapsed":666,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["print('Training set', fx_train.shape)\n","print('Test set', fx_test.shape)\n","print('Training set', sx_train.shape)\n","print('Test set', sx_test.shape)\n","print('Training set', tx_train.shape)\n","print('Test set', tx_test.shape)\n","print('Training set', mx_train.shape)\n","print('Test set', mx_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training set (1543, 64, 64, 3)\n","Test set (388, 64, 64, 3)\n","Training set (1543, 64, 64, 3)\n","Test set (388, 64, 64, 3)\n","Training set (1543, 64, 64, 3)\n","Test set (388, 64, 64, 3)\n","Training set (1543, 64, 64, 3)\n","Test set (388, 64, 64, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yNGHc1x_GERY","colab_type":"code","colab":{}},"source":["def build_classifier(optimizer, dropout, loss):\n","    classifier = Sequential() # Initialising the CNN    \n","    classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu')) \n","    classifier.add(MaxPooling2D(pool_size = (2, 2))) \n","    classifier.add(Dropout(dropout))\n","    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))  \n","    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n","    classifier.add(Dropout(dropout))\n","    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))  \n","    classifier.add(MaxPooling2D(pool_size = (2, 2)))\n","    classifier.add(Dropout(dropout))\n","    classifier.add(Flatten())\n","    classifier.add(Dense(units = 128, activation = 'relu'))\n","    classifier.add(Dense(units = 1, activation = 'sigmoid')) #'tanh'))\n","    \n","    classifier.compile(optimizer = optimizer, loss = loss, metrics = ['accuracy'])\n","    \n","    return classifier\n","\n","classifier = KerasClassifier(build_fn = build_classifier)\n","\n","grid_parameters = {'epochs': N_EPOCHS,\n","                  'optimizer': OPTIMIZERS,\n","                  'dropout': DROPOUT_RATES,                  \n","                  'loss':LOSS_FUNCTIONS                        \n","                  }\n","\n","\n","grid_search = GridSearchCV(estimator = classifier,\n","                           param_grid = grid_parameters,\n","                           scoring = 'accuracy',\n","                           cv = 10)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8t9uqi2Oxzh6","colab_type":"code","outputId":"b0bb0d54-54b7-4c3f-e39f-cf160844edc2","executionInfo":{"status":"ok","timestamp":1576929718003,"user_tz":-180,"elapsed":1064398,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":649}},"source":["f_grid_search = grid_search.fit(fx_train, fy_train, verbose=0)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3657: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3005: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"J6KzeFqCRXN9","colab_type":"code","colab":{}},"source":["s_grid_search = grid_search.fit(sx_train, sy_train, verbose=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xlc6c2yxSpAv","colab_type":"code","colab":{}},"source":["t_grid_search = grid_search.fit(tx_train, ty_train, verbose=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2XxBAaXpSqTJ","colab_type":"code","colab":{}},"source":["m_grid_search = grid_search.fit(mx_train, my_train, verbose=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjWUEv9cyGsc","colab_type":"code","colab":{}},"source":["f_predicted = f_grid_search.predict(fx_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V35GnT1jyuOm","colab_type":"code","colab":{}},"source":["s_predicted = s_grid_search.predict(sx_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BE6s2TVIyuWN","colab_type":"code","colab":{}},"source":["t_predicted = t_grid_search.predict(tx_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HtLtc81Jyudf","colab_type":"code","colab":{}},"source":["m_predicted = m_grid_search.predict(mx_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DPoNlbwJy4y0","colab_type":"code","colab":{}},"source":["predictions = np.zeros(len(f_predicted))\n","for i in range(len(f_predicted)):\n","  if f_predicted[i] == 1 or m_predicted[i] == 1 or s_predicted[i] == 1 or t_predicted[i] == 1:\n","    predictions[i] = 1\n","  else:\n","    predictions[i] = 0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PkNA-cQ85x6u","colab_type":"code","colab":{}},"source":["actuals = np.zeros(len(fy_test))\n","for i in range(len(fy_test)):\n","  if fy_test[i] == 1 or sy_test[i] == 1 or ty_test[i] == 1 or my_test[i] == 1:\n","    actuals[i] = 1\n","  else:\n","    actuals[i] = 0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HTakv-Z63yHw","colab_type":"code","outputId":"aaffc7d3-2bc1-4449-c4a7-ca5862c0a68a","executionInfo":{"status":"ok","timestamp":1576941621325,"user_tz":-180,"elapsed":662,"user":{"displayName":"Yusuf Samsum","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA0CcB0YPpi92x-_zOff45GD6kCKSt-RtE58Ilw-A=s64","userId":"15794270521423134433"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["print(\"Confusion Matrix:\")\n","conf_matrix = confusion_matrix(actuals,predictions)\n","tp = conf_matrix[0][0]\n","tn = conf_matrix[1][1]\n","fp = conf_matrix[1][0]\n","fn = conf_matrix[0][1]\n","acc = (tp +tn) / (tp + tn + fp + fn)\n","recall = tp / (tp + fn)\n","precision = tp / (tp + fp)\n","print(conf_matrix)\n","print(\"True Positives(TP): \" + str(tp))\n","print(\"False Positives(FP): \" + str(fp))\n","print(\"False Negatives(FN): \" + str(fn))\n","print(\"True Negatives(TN): \" + str(tn))\n","print(\"Performance Measures:\")\n","print(\"Accuracy: \" + str(acc))\n","print(\"Precision: \" + str(precision))\n","print(\"Recall: \" + str(recall))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion Matrix:\n","[[251   0]\n"," [137   0]]\n","True Positives(TP): 251\n","False Positives(FP): 137\n","False Negatives(FN): 0\n","True Negatives(TN): 0\n","Performance Measures:\n","Accuracy: 0.6469072164948454\n","Precision: 0.6469072164948454\n","Recall: 1.0\n"],"name":"stdout"}]}]}